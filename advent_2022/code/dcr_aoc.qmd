---
# Define meta data
#* Title
title: |
    2022 Advent of Code
#* author
author: Damon C. Roberts
#* date
date: today
#* turn on table of contents
toc: true
#* set format
format:
    #** html doc
  html:
    #** sketchy theme
    theme: sketchy
    #** katex for mat
    html-math-method: katex 
    #** show code option
    code-tools: true
    #** self-contain into html file
    self-contained: true
#* set execution options
execute:
    #** turn off warnings
    warning: false
    #** cache the executed code
    cache: true
#* use python3 in jupyter
jupyter: python3
---

<!--
    - Description: QMD script for Advent of Code
    - Updated: 2022-12-01
    - Updated by: dcr 
    - Code:
    
    - Writing:

-->

# Github repository

You can find the full code repository on [my github](https://github.com/DamonCharlesRoberts/advent_of_code)

# Importing packages

```{python}
#| label: module-import

import duckdb # for database management
import numpy as np # for array management
import polars as pl # for data munging
from itertools import groupby # for managing list of lists
```
<!--
    END OF IMPORTING PACKAGES SECTION
-->

# Set up a duckdb database for the data in these problems.

```{python}
# create database
db = duckdb.connect("../data/aoc_2022_db")
```
<!--
    END OF SETTING UP A DUCKDB DATABASE SECTION
-->

# Day 1

## Problem 1

::: {.callout-important appearance="minimal"}

## Problem

The jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves' expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input). | The Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.

For example, suppose the Elves finish writing their items' Calories and end up with the following list:

1000
2000
3000

4000

5000
6000

7000
8000
9000

10000

This list represents the Calories of the food carried by five Elves:

- The first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.
- The second Elf is carrying one food item with 4000 Calories.
- The third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.
- The fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.
- The fifth Elf is carrying one food item with 10000 Calories.

In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).

Find the Elf carrying the most Calories. How many total Calories is that Elf carrying?
:::

1. Enter the data into a database:

```{python}
#| label: day-1-1_dataframe

# Load input data
    #* Open the txt file and enter the lines into a list object
with open("../data/day-1-1-input.txt") as f:
    txt = [line.strip() for line in f]
    #* Create a list of list objects based on the empty element
txt2 = [list(sub) for ele, sub in groupby(txt, key = bool) if ele]
    #* convert the elements of the list of list objects to integers
txt3 = [[int(j) for j in i] for i in txt2]

# Convert to dataframe
day1 = pl.DataFrame(
    { "Calories": txt3 # add calories column from txt3 list
    }
)

```

2. Now groupby elf and see which one has most:

```{python}
#| label: day-1-1-database-count

day1_2 = day1.with_column(
    pl.col("Calories").arr.eval(pl.element()
    .sum()).alias("Total") # take each element in the list for the Calories column, and sum it, then put that in a Total column
).with_column(
    pl.col("Total").arr.get(0).cast(pl.Int64).alias("Total") # made Total a list column, grab the element and just write over it, so it is int column
).with_column(
    pl.col("Total").sort_by("Total") # sort the dataframe by the total column
)
```

3. Filter for the highest
```{python}
#| label: day-1-1-filter
day1_2_filtered = day1_2.filter( # filter from day1_2 
        pl.col("Total") == pl.col("Total").max() # find the maximum element in Total column
)
```

:::{.callout-important appearance="minimal"}
## Part 1 Answer

```{python}
#| label: display-day-1-1-answer

# Print answer
print("Day 1, Part 1 Answer: " + str(day1_2_filtered.select("Total")[0,0]))
```
:::

## Problem 2

:::{.callout-important appearance="minimal"}
## Problem

By the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually run out of snacks.

To avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.

In the example above, the top three Elves are the fourth Elf (with 24000 Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.

Find the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?
:::

1. Get three elves with most calories

```{python}
#| label: day1-select-top-3
day1_3 = day1_2.select( # select from day1_2
    pl.col("Total").top_k(k = 3) # take the rows with the highest three Total
    )
```

3. Sum the top three

```{python}
#| label: day1-sum
day1_3_ans = day1_3.sum() # print the sum of the top 3
```

4. Store the dataframe into the database

```{python}
#| label: store-day-1-day1
# Convert day12 to pyarrow
day1_4 = day1_2.to_arrow()
# Store dataframe as table
db.execute('''
    create or replace table day_1 as select * from day1_4
''')
```

:::{.callout-important appearance="minimal"}

## Part 2 Answer
```{python}
#| label: display-day-1-2-answer
print("Day 1, Part 2 Answer: " + str(day1_3_ans.select("Total")[0,0]))
```

:::
<!--
    END OF DAY 1 SECTION
-->

# Day 2

## Problem 1

:::{.callout-important appearance="minimal"}
## Problem

The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.

Rock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.

Appreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. "The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column--" Suddenly, the Elf is called away to help with someone's tent.

The second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.

The winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).

Since you can't be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.

For example, suppose you were given the following strategy guide:

A Y
B X
C Z
This strategy guide predicts and recommends the following:

In the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).
In the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).
The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.
In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).

What would your total score be if everything goes exactly according to your strategy guide?
:::

1. Read input data

```{python}
#| label: day-2-load

# Open the csv file and enter the lines into a dataframe
day2_1 = pl.read_csv("../data/day-2-input.csv", has_header = False)
```

2. Split column

```{python}
#| label: day-2-split-column

day2_2 = day2_1.select([ # select multiple columns
        pl.col("column_1").str.split(" ").arr.get(0).alias("Opponent"), # grab column_1, split the string, grab the first element, and put it in the Opponent column
        pl.col("column_1").str.split(" ").arr.get(1).alias("Me") # grab column_1, split the string, grab the second element, and put it in the Me column
])

```

3. Determine outcomes

```{python}
#| label: day-2-quantify

day2_3 = day2_2.with_columns(
    pl.when(
        # Opponent = Rock; Me = Paper
        pl.col("Opponent").str.contains("A") & pl.col("Me").str.contains("Y")
    ).then(6) # I win
    .when(
        # Opponent = Rock; Me = Rock
        pl.col("Opponent").str.contains("A") & pl.col("Me").str.contains("X")
    ).then(3) # Draw
    .when(
        # Opponent = Rock; Me = Scissors
        pl.col("Opponent").str.contains("A") & pl.col("Me").str.contains("Z")
    ).then(0) # I lose
    .when(
        # Opponent = Paper; Me = Paper
        pl.col("Opponent").str.contains("B") & pl.col("Me").str.contains("Y")
    ).then(3) # Draw
    .when(
        # Opponent = Paper; Me = Rock
        pl.col("Opponent").str.contains("B") & pl.col("Me").str.contains("X")
    ).then(0) # I lose
    .when(
        # Opponent = Paper; Me = Scissors
        pl.col("Opponent").str.contains("B") & pl.col("Me").str.contains("Z")
    ).then(6) # I win
    .when(
        # Opponent = Scissors; Me = Paper
        pl.col("Opponent").str.contains("C") & pl.col("Me").str.contains("Y")
    ).then(0) # Lose
    .when(
        # Opponent = Scissors; Me = Rock
        pl.col("Opponent").str.contains("C") & pl.col("Me").str.contains("X")
    ).then(6) # I win
    .when(
        # Opponent = Scissors; Me = Scissors
        pl.col("Opponent").str.contains("C") & pl.col("Me").str.contains("Z")
    ).then(3) # Draw
    .alias("Result") 
)
```

4. Calculate my score
```{python}
#| label: day-2-score

day2_4 = day2_3.with_columns(
    pl.when(
        pl.col("Me").str.contains("Y") # If I used paper...
    )
    .then(
        pl.col("Result") + 2 # ...add two to my score
    )
    .when(
        pl.col("Me").str.contains("X") # If I used rock...
    )
    .then(
        pl.col("Result") + 1 #... add one to my score
    )
    .when(
        pl.col("Me").str.contains("Z") # If I used scissors...
    )
    .then(
        pl.col("Result") + 3 # ... add three to my score
    )
    .alias("Score") # store this as score column
)
```

5. Calculate total score

```{python}
#| label: day-2-1-score

score = day2_4.select(
    pl.col("Score") # grab my score column
).sum() # take sum of rows in column
```

:::{.callout-important appearance="minimal"}
## Answer

```{python}
#| label: display-2-1-answer
print("Day 2, Part 1 Answer: " + str(score.select("Score")[0,0]))
```
:::

## Problem 2

:::{.callout-important appearance="minimal"}
## Problem 
The Elf finishes helping with the tent and sneaks back over to you. "Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!"

The total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:

In the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4.
In the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1.
In the third round, you will defeat your opponent's Scissors with Rock for a score of 1 + 6 = 7.
Now that you're correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.

Following the Elf's instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?
:::

1. Take the dataframe I had at the start after split and redefine what the strategies mean

```{python}
day2_5 = day2_2.with_columns(
    pl.when(
        # Need to Draw
        pl.col("Me").str.contains("Y")
    )
    .then(3) # so I draw
    .when(
        # Need to lose
        pl.col("Me").str.contains("X")
    )
    .then(0) # So I lose
    .when(
        # Need to win
        pl.col("Me").str.contains("Z")
    )
    .then(6) # So I win
    .alias("Outcome")
)
```

2. Calculate the score

```{python}
#| label: day2-2-score

day2_6 = day2_5.with_column(
    pl.when(
        # Opponent = Rock; Me = Paper
        (pl.col("Outcome") == 6) & pl.col("Opponent").str.contains("A")
    )
    .then(
        pl.col("Outcome") + 2 # paper... add two to score
    )
    .when(
        # Opponent = Rock; Me = Rock
        (pl.col("Outcome") == 3) & pl.col("Opponent").str.contains("A")
    )
    .then(
        pl.col("Outcome") + 1 # rock = add rock to score
    )
    .when(
        # Opponent = Rock; Me = Scissors
        (pl.col("Outcome") == 0) & pl.col("Opponent").str.contains("A")
    )
    .then(
        pl.col("Outcome") + 3 # scissors = add three to score
    )
    .when(
        # Opponent = Paper; Me = Scissors
        (pl.col("Outcome") == 6) & pl.col("Opponent").str.contains("B")
    )
    .then(
        pl.col("Outcome") + 3 # scissors = add three to score
    )
    .when(
        # Opponent = Paper; Me = Paper
        (pl.col("Outcome") == 3) & pl.col("Opponent").str.contains("B")
    )
    .then(
        pl.col("Outcome") + 2 # paper... add two to score
    )
    .when(
        # Opponent = Paper; Me = Rock
        (pl.col("Outcome") == 0) & pl.col("Opponent").str.contains("B")
    )
    .then(
        pl.col("Outcome") + 1 # rock = add rock to score
    )
    .when(
        # Opponent = Scissors; Me = Rock
        (pl.col("Outcome") == 6) & pl.col("Opponent").str.contains("C")
    )
    .then(
        pl.col("Outcome") + 1 # rock = add rock to score
    )
    .when(
        # Opponent = Scissors; Me = Scissors
        (pl.col("Outcome") == 3) & pl.col("Opponent").str.contains("C")
    )
    .then(
        pl.col("Outcome") + 3 # scissors = add three to score
    )
    .when(
        # Opponent = Scissors; Me = Paper
        (pl.col("Outcome") == 0) & pl.col("Opponent").str.contains("C")
    )
    .then(
        pl.col("Outcome") + 2 # paper... add two to score
    )
    .alias("Score")
)
```

3. Calculate total score

```{python}
#| label: day-2-2-score

score2 = day2_6.select(
    pl.col("Score")
).sum()
```

6. Store dataframe in database
```{python}
#| label: store-day-2-data-frame

# Convert dataframe to arrow
day_2_7 = day2_2.to_arrow()

# Store in database
db.execute('''
    create or replace table day_2 as select * from day_2_7
''')

```
:::{.callout-important appearance="minimal"}
## Answer
```{python}
#| label: display-day-2-2-answer
print("Day 2, Part 2 Answer: " + str(score2.select("Score")[0,0]))
```
:::

- Wow! That was verbose.

<!--
    END OF DAY 2 SECTION
-->

# Day 3

## Part 1

:::{.callout-important appearance="minimal"}
## Problem

One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn't quite follow the packing instructions, and so a few items now need to be rearranged.

Each rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.

The Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).

The list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.

For example, suppose you have the following list of contents from six rucksacks:

vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
The first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p.
The second rucksack's compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L.
The third rucksack's compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P.
The fourth rucksack's compartments only share item type v.
The fifth rucksack's compartments only share item type t.
The sixth rucksack's compartments only share item type s.
To help prioritize item rearrangement, every item type can be converted to a priority:

Lowercase item types a through z have priorities 1 through 26.
Uppercase item types A through Z have priorities 27 through 52.
In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.

Find the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?
:::

1. Load the input data

```{python}
#| label: day-3-input-load

# Load input data
with open("../data/day-3-input.txt") as f:
    txt = [line.strip() for line in f]
```

```{python}
#| label: day3-1-divide-original
#* Take the length of each element and divide it by 2
Compartment_1 = [i[0:len(i)//2] for i in txt]
Compartment_2 = [i[len(i)//2:] for i in txt]
```

3. Make each character its own string

```{python}
#| label: day3-1-character-per-string
Compartment_1_str = [list(e) for e in Compartment_1]
Compartment_2_str = [list(e) for e in Compartment_2]
```

4. Toss it all into a dataframe

```{python}
#* lable: day3-1-dataframe
# Toss it all into a dataframe
day3_1 = pl.DataFrame({
    #* take the txt object and store it in column Original
    "Original": txt,
    #* take Compartment_1_str object
    #* Convert it to ascii numbers - rules from game
    #* Store it in Compartment_1
    "Compartment_1": [[(ord(i)-38) if i.isupper() else (ord(i)-96) for i in j] for j in Compartment_1_str],
    #* take Compartment_2_str object
    #* Convert it to ascii numbers - rules from game
    #* Store it in Compartment_2
    "Compartment_2": [[(ord(i)-38) if i.isupper() else (ord(i)-96) for i in j] for j in Compartment_2_str],
})
```

5. Find the items in common between compartment
```{python}
day3_2 = day3_1.with_columns([
    #* Take Compartment_1
    pl.col("Compartment_1")
    #* Find unique values
    .arr.unique()
    #* Store unique values in Compartment_1_uniq
    .alias("Compartment_1_uniq"),
    #* Take Compartment_2
    pl.col("Compartment_2")
    #* Find unique values
    .arr.unique()
    #* Store it in Compartment_2_uniq
    .alias("Compartment_2_uniq")
]).with_columns(
    #* Take Compartment_1_uniq
    pl.col("Compartment_1_uniq")
    #* Concat Compartment_2_uniq to it
    .arr.concat(pl.col("Compartment_2_uniq"))
    #* Find elements that are duplicated between them
    .arr.eval(pl.element().filter(pl.element().is_duplicated()))
    #* Find unique values remaining
    .arr.unique()
    #* Store result in Match
    .alias("Match")
)
```

6. Sum across priority values for each elf
```{python}
day3_3 = day3_2.with_column(
    #* Take Match
    pl.col("Match")
    #* Sum elements in row
    .arr.eval(pl.element().sum())
    #* Grab the result
    .arr.get(0)
    #* Store result in Sum
    .alias("Sum")
)
```

7. Sum across summed-priority values for the elves
```{python}
day3_1_ans = day3_3.select(
    #* Grab the sum for each elf
    pl.col("Sum")
).sum() #* and sum across elves
```

:::{.callout-important appearance="minimal"}
## Answer
```{python}
print("Day 3, Part 1 Answer: " + str(day3_1_ans[0,0]))
```
:::

## Part 2

:::{.callout-important appearance="minimal"}
## Problem
As you finish identifying the misplaced items, the Elves come to you with another issue.

For safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group's badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.

The problem is that someone forgot to put this year's updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.

Additionally, nobody wrote down which item type corresponds to each group's badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.

Every set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group's rucksacks are the first three lines:

vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
And the second group's rucksacks are the next three lines:

wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
In the first group, the only item type that appears in all three rucksacks is lowercase r; this must be their badges. In the second group, their badge item type must be Z.

Priorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (r) for the first group and 52 (Z) for the second group. The sum of these is 70.

Find the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?
:::

1. Create Group ID, and convert columns to Utf
```{python}
#| label: day3-create-group-id
day3_4 = day3_1.with_columns([
    #* take the original column...
    pl.col("Original"),
    #* add a new column of the same length...
    #* repeating values every 3 rows
    pl.Series(np.repeat(np.arange(100), 3))
    #* store it as Group_ID
    .alias("Group_ID")
]).with_columns([
    #* Grab the Compartment_1 column
    pl.col("Compartment_1")
    #* Convert it to str
    .arr.eval(
        pl.element().cast(pl.Utf8())
    )
    #* Store it as Compartment_1
    .alias("Compartment_1"),
    #* Grab the Compartment_2 column
    pl.col("Compartment_2")
    #* Convert it to str
    .arr.eval(
        pl.element().cast(pl.Utf8())
    )
    #* Store it as Compartment_2
    .alias("Compartment_2")
])
```

2. Concat the two columns to create a full list
```{python}
#| label: day3-2-concat-columns
day3_5 = day3_4.with_columns([
    #* Grab the Compartment_1 Column
    pl.col("Compartment_1")
    #* Concat the Compartment_2 Column to it
    .arr.concat("Compartment_2")
    #* Create the Compartment_3 Column
    .alias("Compartment_3")
])
```

3. Group-by the three elves in a group on their full list
```{python}
#| label: day3-2-group-by
day3_6 = (
    day3_5
    #* Group the day3_5 dataframe by Group_ID column
    .groupby(["Group_ID"])
    #* And for each of the groups...
    #* Join the compartment_3 columns
    .agg([
        pl.col("Compartment_3").arr.join(",").alias("Compartment_3")
    ])
)
```

4. Slice the full list for the elves into three distinct column. One for each elf.
```{python}
#| label: day3-2-column-per-member
day3_7 = day3_6.with_columns([
    #* Take the Compartment_3 column
    pl.col("Compartment_3")
    #* And slice it into three parts...
        #** Grab the first part and store it for 
        #** member_1
    .arr.slice(0,3).arr.get(0).alias("Member_1"),
    #* Take the Compartment_3 column
    pl.col("Compartment_3")
    #* And slice it into three parts...
        #** Grab the first part and store it for 
        #** member_2  
    .arr.slice(0,3).arr.get(1).alias("Member_2"),
    #* Take the Compartment_3 column
    pl.col("Compartment_3")
        #* And slice it into three parts...
        #** Grab the first part and store it for 
        #** member_3
    .arr.slice(0,3).arr.get(2).alias("Member_3"),
])
```

5. Split the list for each elf
```{python}
#| label: day3-2-split-the-elf-list
day3_8 = day3_7.with_columns([
    #* Take the Member_1 column
    pl.col("Member_1")
    #* And split it by commas
    .str.split(",")
    #* Store the result in Member_1
    .alias("Member_1"),
    #* Take the Member_2 column
    pl.col("Member_2")
    #* And split it by commas
    .str.split(",")
    #* Store the result in Member_2
    .alias("Member_2"),
    #* Take the Member_3 column
    pl.col("Member_3")
    #* And split it by commas
    .str.split(",")
    #* Store the result in Member_3
    .alias("Member_3")
])
```

6. Convert the list for each elf back into an integer
```{python}
#| label: day3-2-convert-elf-list-to-int
day3_9 = day3_8.with_columns([
    #* Take the Member_1 column
    pl.col("Member_1")
    #* And convert the elements to integers
    .arr.eval(
        pl.element().cast(pl.Int64())
    )
    #* Store the result to Member_1
    .alias("Member_1"),
    #* Take the Member_2 column
    pl.col("Member_2")
    #* And convert the elements to integers
    .arr.eval(
        pl.element().cast(pl.Int64())
    )
    #* Store the result to Member_2
    .alias("Member_2"),
    #* Take the member_3 column
    pl.col("Member_3")
    #* And convert the elements to integers
    .arr.eval(
        pl.element().cast(pl.Int64())
    )
    #* Store the result to Member_3
    .alias("Member_3")
])
```

7. Find the unique values between the three columns, then keep the ones that are unique
```{python}
#| label: day3-2-unique-value-hunting
day3_10 = day3_9.with_columns([
    #* Take the member_1 column
    pl.col("Member_1")
    #* And find its unique values
    .arr.unique()
    #* Store the result in Member_1_Uniq
    .alias("Member_1_Uniq"),
    #* Take the Member_2 column
    pl.col("Member_2")
    #* And find its unique values
    .arr.unique()
    #* Store the result in Member_2_Uniq
    .alias("Member_2_Uniq"),
    #* Take the Member_3 column
    pl.col("Member_3")
    #* And find its unique values
    .arr.unique()
    #* Store the result in Member_3_Uniq
    .alias("Member_3_Uniq")
]).with_columns([
    #* Take the Member_1_Uniq column
    pl.col("Member_1_Uniq")
    #* And concat the Member_2_Uniq column to it
    .arr.concat(pl.col("Member_2_Uniq"))
    #* From the full list, keep the values that are duplicates
    .arr.eval(pl.element().filter(pl.element().is_duplicated()))
    #* Keep the unique values from that result
    .arr.unique()
    #* Store the result in Match_12
    .alias("Match_12")
]).with_columns([
    #* Take Match_12
    pl.col("Match_12")
    #* Concat Member_3_Uniq to it
    .arr.concat(pl.col("Member_3_Uniq"))
    #* From the full list, find the values that are duplicates
    .arr.eval(pl.element().filter(pl.element().is_duplicated()))
    #* Keep the unique values from that result
    .arr.unique()
    #* Store the result in Match
    .alias("Match")
])
```

8. Sum across the priority values remaining
```{python}
#| label: day3-2-sum-within-group
day3_11 = day3_10.with_column(
    #* Take the match column
    pl.col("Match")
    #* Sum across elements within the cell
    .arr.eval(pl.element().sum())
    #* And grab the result
    .arr.get(0)
    #* then store the result in Sum
    .alias("Sum")
)
```
9. Sum across all the groups
```{python}
#| label: day3-2-sum-between-group
day3_2_ans = day3_11.select(
    #* Take the Sum column
    pl.col("Sum")
).sum() # and sum across groups
```


:::{.callout-important appearance="minimal"}
## Answer
```{python}
#| label: display-3-2-answer
print("Day 3, Part 2 Answer: " + str(day3_2_ans[0,0]))
```
:::

I first did this with some loops and it was real quick and easy, but I have a project that kind of has some similar steps and wanted to figure out how to do it this way... this was absolutely a trash performance by me.
<!--
    END OF Day 3 Section
-->

# Day 4

##  Part 1

:::{.callout-important appearance="minimal"}
## Problem
Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.

However, as some of the Elves compare their section assignments with each other, they've noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).

For example, consider the following list of section assignment pairs:

2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
For the first few pairs, this list means:

Within the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8).
The Elves in the second pair were each assigned two sections.
The Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9.
This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:

.234.....  2-4
.....678.  6-8

.23......  2-3
...45....  4-5

....567..  5-7
......789  7-9

.2345678.  2-8
..34567..  3-7

.....6...  6-6
...456...  4-6

.23456...  2-6
...45678.  4-8
Some of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.

In how many assignment pairs does one range fully contain the other?
:::

1. Load file

```{python}
#| label: day-4-load-file

# Load input data
with open("../data/day-4-input.txt") as f:
    txt = [line.strip() for line in f]
```

2. Put in dataframe
```{python}
#| label: day-4-create-data-frame
day4 = pl.DataFrame({
    "Original": txt
})
```

3. Separate into different columns
```{python}
#| label: day-4-data-cleaning
day4_1 = day4.with_columns([
    #* split original column and call it elf_1
    pl.col("Original").str.split(",").arr.get(0).alias("Elf_1"),
    #* split original column and call it elf_2
    pl.col("Original").str.split(",").arr.get(1).alias("Elf_2")
]).with_columns([
    #* take elf_1 and split it 
    pl.col("Elf_1").str.split("-").alias("Elf_1"),
    #* take elf_1 and split it
    pl.col("Elf_2").str.split("-").alias("Elf_2")
]).with_columns([
    #* take elf_1
    pl.col("Elf_1")
    #* and make elements int
    .arr.eval(
        pl.element().cast(pl.Int64())
    )
    #* store result as elf_1
    .alias("Elf_1"),
    #* take elf_2
    pl.col("Elf_2")
    #* and make elements int
    .arr.eval(
        pl.element().cast(pl.Int64)
    )
    #* store result as elf_2
    .alias("Elf_2")
]).with_columns([
    #* take first element from elf_1 and store to elf_1_1
    pl.col("Elf_1").arr.get(0).alias("Elf_1_1"),
    #* take second element from elf_1 and store to elf_1_2
    pl.col("Elf_1").arr.get(1).alias("Elf_1_2"),
    #* take first element from elf_2 and store to elf_2_1
    pl.col("Elf_2").arr.get(0).alias("Elf_2_1"),
    #* take second element from elf_2 and store to elf_2_2
    pl.col("Elf_2").arr.get(1).alias("Elf_2_2")
])
```

4. Create list of values for each elf

```{python}
#| label: day-4-each-elf-tasks
elf_1_1 = day4_1.select([
    #* convert elf_1_1 to numpy
    pl.col("Elf_1_1")
]).to_numpy()

elf_1_2 = day4_1.select([
    #* convert elf_1_2 to numpy
    pl.col("Elf_1_2")
]).to_numpy()

#* Create numpy arrays from each of the section start and stop numbers
elf_1_range = [np.arange(start = i, stop = j+1) for i,j in zip(elf_1_1, elf_1_2)]
#* Convert arrays in list to list to make list of list
elf_1_range = [(i.tolist()) for i in elf_1_range]

elf_2_1 = day4_1.select([
    #* convert elf_2_1 to numpy
    pl.col("Elf_2_1")
]).to_numpy()

elf_2_2 = day4_1.select([
    #* Convert elf_2_2 to numpy
    pl.col("Elf_2_2")
]).to_numpy()
#* Create numpy arrays from each of the section start and stop numbers
elf_2_range = [np.arange(start=i, stop=j+1) for i,j in zip(elf_2_1,elf_2_2)]
#* Convert arrays in list to list to make list of lists
elf_2_range = [(i.tolist()) for i in elf_2_range]
```

4. Toss it in columns

```{python}
#| label: day-4-range-of-tasks
day4_2 = pl.DataFrame({
    "Original": txt,
    "Elf_1_range": elf_1_range,
    "Elf_2_range": elf_2_range
})
```

5. Match the columns

```{python}
#| label: day-4-match
day4_3 = day4_2.with_columns([
    #* take elf_1_range
    pl.col("Elf_1_range")
    #* concat elf_2_range to it
    .arr.concat(pl.col("Elf_2_range"))
    #* take each element and grab duplicates
    .arr.eval(pl.element().filter(pl.element().is_duplicated()))
    #* then take the unique values from that
    .arr.unique()
    #* store it in match column
    .alias("Match")
])
```

6. Now see if one is fully encompassed by the other
```{python}
#| label: day-4-check-full-encompassing
day4_4 = day4_3.with_columns([
    pl.when(
        #* when length of list elf_1_range is same as Match...
        pl.col("Elf_1_range").arr.lengths() == pl.col("Match").arr.lengths()
    )
    #* then make equal to one
    .then(1)
    .when(
        #* when length of list elf_2_range is same as Match
        pl.col("Elf_2_range").arr.lengths() == pl.col("Match").arr.lengths()
    )
    #* then make equal to one
    .then(1)
    #* if neither of conditions, then set to zero
    .otherwise(0)
    #* Store the results in Overlap
    .alias("Overlap")
])
```

7. Sum across groups

```{python}
#| label: day-4-sum-across-groups
day4_1_ans = day4_4.select(
    #* take Overlap column
    pl.col("Overlap")
).sum() #* sum across
```

:::{.callout-important appearance="minimal"}
## Answer
```{python}
#| label: display-day-4-1-ans
print("Day 4, Part 1 Answer: " + str(day4_1_ans[0,0]))
```
:::

## Part 2

:::{.callout-important appearance="minimal"}
## Problem
It seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that overlap at all.

In the above example, the first two pairs (2-4,6-8 and 2-3,4-5) don't overlap, while the remaining four pairs (5-7,7-9, 2-8,3-7, 6-6,4-6, and 2-6,4-8) do overlap:

5-7,7-9 overlaps in a single section, 7.
2-8,3-7 overlaps all of the sections 3 through 7.
6-6,4-6 overlaps in a single section, 6.
2-6,4-8 overlaps in sections 4, 5, and 6.
So, in this example, the number of overlapping assignment pairs is 4.

In how many assignment pairs do the ranges overlap?
:::

1. Take the dataframe from the previous part and find any non-empty list object in Match column

```{python}
#| label: day-4-overlap
day4_5 = day4_3.with_columns([
    pl.when(
        #* If the length of list in Match column is not empty
        pl.col("Match").arr.lengths() != 0
    )
    #* then set equal to 1
    .then(1)
    #* otherwise set equal to 0
    .otherwise(0)
    #* Store result in Overlap
    .alias("Overlap")
])
```

2. Sum over the Overlap column to find groups with any overlap
```{python}
#| label: day-4-sum-across
day4_2_ans = day4_5.select(
    #* Take overlap column
    pl.col("Overlap")
).sum() #* Sum across
```

:::{.callout-important appearance="minimal"}
## Answer
```{python}
#| label: display-day-4-2-ans
print("Day 4, Part 2 Answer: " + str(day4_2_ans[0,0]))
```
:::
<!--
    END OF DOCUMENT
-->